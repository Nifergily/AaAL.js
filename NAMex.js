let currentEx;


document.getElementById('select').addEventListener('change', changeEx);

document.getElementById('LoadSol').addEventListener('click', PreLoadAlg);

document.getElementById('inp').addEventListener('input', search);

document.getElementById('CodeArea').addEventListener('change', removeHallow);



function removeHallow() {
    let Code = document.getElementById("CodeArea").value.split(/\n/);
    let result = "";
    for (let y = 0; y < Code.length; y++) {
        if (Code[y] != "") {
            result += Code[y];
            result += "\n";
        }
    }
    document.getElementById("CodeArea").value = result;
}

function search() {
    let word = document.getElementById('inp').value;
    let select = document.getElementById('select');

    removeHidden(select);
    setHidden(word, select);
}

function removeHidden(select) {
    for (let i = 1; i < select.length; i++) {
        select[i].removeAttribute('hidden');
    }
}

function setHidden (word, select) {
    for (let i = 1; i < select.length; i++) {
        if (select[i].value.toLowerCase().indexOf(word.toLowerCase()) === -1) {
            select[i].setAttribute('hidden', 'hidden');
        }
    }
}

function changeEx() {
    currentEx = this.selectedIndex - 1;

    let fragment = document.createDocumentFragment();
    let elem = document.createElement("div");

    elem.innerHTML = exercises[currentEx];
    elem.setAttribute('id', 'div');

    fragment.appendChild(elem);
    document.getElementById('div').replaceWith(fragment);
}

function PreLoadAlg () {
    answer = answers[currentEx];
    let answerWord = answer.slice(0, answer.indexOf(' '));
    let answerCode = answer.slice(answer.indexOf(' ') + 1, answer.length);

    loadAlg(answerWord, answerCode);
}


let exercises = [
    '<p>Алфавит - <strong>{a,b,c}</strong>. Если буква \'a\' входит в слово, то выдать \'a\', иначе выдать пустое слово.</p><br />' +
    '<details><summary>Решение</summary>' +
    '<p>1. Удаляем все буквы \'b\' и \'c\' (правила 1 и 2).</p>' +
    '<p>2. Из всех букв \'a\' оставляем только одну (правило 3).</p></details><br />',

    '<p>Алфавит - <strong>{a,b,c}</strong>. Удвоить каждую букву в слове.</p><br />' +
    '<details><summary>Решение</summary>' +
    '<p>1. Ставим \'*\' слева от слова (правило 5).</p>' +
    '<p>2. Гоним \'*\' через слово слева направо, удваивая буквы (правила 1,2 и 3).</p>' +
    '<p>3. По исчерпании букв удаляем \'*\' (правило 4).</p></details><br />',

    '<p>Алфавит - <strong>{0,1,2,3}</strong>. Перевести число из четверичной системы счисления в двоичную.</p><br />' +
    '<details><summary>Решение</summary>' +
    '<p>1. Ставим \'#*\' слева от слова (правило 8), причем \'#\' необходим для удаления возможного незначащего нуля.</p>' +
    '<p>2. Гоним \'*\' через слово слева направо, заменяя каждую четверичную цифру на две двоичные цифры (правила 1,2,3 и 4).</p>' +
    '<p>3. По исчерпании цифр удаляем \'*\' (правило 5), удаляем незначащий ноль, который \n' +
    'появляется, если левая четверичная цифра - 1 (правило 6) и, наконец, удаляем \'#\' (правило 7).</p></details><br />',

    '<p>Алфавит - <strong>{a,b,c}</strong>. Если слово непустое, то удалить его первую букву; в противном случае оставить пустое слово.</p><br />' +
    '<details><summary>Решение</summary>' +
    '<p>1. Ставим \'*\' слева от слова (правило 5).</p>' +
    '<p>2. Удаляем первую букву и останавливаемся (правила 1,2 и 3).</p>' +
    '<p>3. Если слово пустое, то удаляем \'*\' и останавливаемся (правило 4).</p></details><br />',

    '<p>Алфавит - <strong>{0,1,2}</strong>. Прибавить единицу к троичному числу.</p><br />' +
    '<details><summary>Решение</summary>' +
    '<p>1. Ставим \'*\' слева от слова (правило 9). Гоним \'*\' через слово слева направо (правила 5, 6 и 7). Затем заменяем ее на \'#\' (правило 8).</p>' +
    '<p>2. Гоним \'#\' справа налево до первого символа, отличного от двойки, или, если все двойки, до начала слова. Заменяем двойки нулями. ' +
    'Как только встречаем первый символ, отличный от двойки, увеличиваем его на единицу и останавливаемся (правила 1,2 и 3).</p>' +
    '<p>3. Если в слове только двойки, то приписываем слева единицу и останавливаемся (правило 4).</p></details><br />',

    '<p>Алфавит - <strong>{|,0,1,2}</strong>. Перевести число из единичной системы счисления в троичную.</p><br />' +
    '<details><summary>Решение</summary>' +
    '<p>1. Ставим \'0*\' слева от слова (правило 7).</p>' +
    '<p>2. Далее строим троичное число левее слова (начальное число - 0). Построение состоит из последовательности однотипных шагов. На каждом шаге забираем от \n' +
    'исходного числа палочку (правило 5), прибавляя затем к троичному числу единицу (правила 1,2,3 и 4).</p>' +
    '<p>3. Символ \'#\' - признак того, что забрали от исходного числа палочку. По исчерпании палочек останавливаемся (правило 6).</p></details><br />',

    '<p>Алфавит - <strong>{a,b,c}</strong>. Переставить буквы в слове так, чтобы вначале располагались буквы \'a\', затем буквы \'b\', a затем буквы \'c\'.</p><br />' +
    '<details><summary>Решение</summary>' +
    '<p>1. Достаточно переставлять символы в каждой из комбинаций \'ba\', \'cb\' и \'ca\' до тех пор, пока ни одной такой комбинации не останется.</p></details><br />',

    '<p>Алфавит - <strong>{a,b}</strong>. Если слово содержит равное количество букв \'a\' и \'b\', то выдать пустое слово, иначе выдать любое непустое слово.</p><br />' +
    '<details><summary>Решение</summary>' +
    '<p>1. Удаляем все пары \'ab\' и \'ba\'.</p>' +
    '<p>2. Если слово содержит равное количество букв \'a\' и \'b\', то останется пустое слово, иначе ' +
    'останется слово из тех букв, которых было больше в исходном слове.</p></details><br />',

    '<p>Алфавит - <strong>{a,b}</strong>. Слово имеет четную длину. Удалить его правую половину.</p><br />' +
    '<details><summary>Решение</summary>' +
    '<p>1. Ставим \'*\' слева от слова (правило 8). Далее - последовательность однотипных шагов. На каждом шаге удаляем один правый символ. </p>' +
    '<p>2. Передвигаем \'*\' на одну позицию вправо, одновременно ставя символ \'#\' (правила 5 и 6); если справа' +
    'от \'*\' нет символов, то останавливаемся (правило 7).</p>' +
    '<p>3. Двигаем \'#\' вправо до конца слова (правила 1 и 2).</p>' +
    '<p>4. Удаляем правый символ (правила 3 и 4).</p></details><br />',

    '<p>Алфавит - <strong>{a,b,=}</strong>. Удвоить слово через знак \'=\'.</p><br />' +
    '<details><summary>Решение</summary>' +
    '<p>1. Ставим \'=*\' слева от слова (правило 10). Далее - последовательность однотипных шагов.</p>' +
    '<p>2. Описание одного шага. а) Переставляем \'*\' на одну позицию вправо (правила 7 и 8), ' +
    'одновременно добавляя символ \'c\' (для \'a\') или \'d\' (для \'b\').</p>' +
    '<p>3. Гоним \'c\' и \'d\' влево до \'=\' ' +
    '(правила 1,2,3 и 4), после чего меняем их обратно на \'a\' и \'b\' (правила 5 и 6).</p>' +
    '<p>4. По исчерпании символов исходного слова останавливаемся (правило 9).</p></details><br />',

    '<p>Алфавит - <strong>{0,1,2,3}</strong>. Перевести двоичное число в четверичное.</p><br />' +
    '<details><summary>Решение</summary>' +
    '<p>1. Ставим \'*\' слева от слова (правило 11).</p>' +
    '<p>2. Гоним \'*\' в конец слова (правила 8 и 9), после чего заменяем ее на \'#\' (правило 10).</p>' +
    '<p>3. Гоним \'#\' в начало слова, заменяя каждую пару двоичных цифр на соответствующую ' +
    'четверичную цифру (правила 1,2,3 и 4).</p>' +
    '<p>4. Завершаем алгоритм (если количество цифр в числе нечетно, то применяем правило 5 ' +
    'или 6, иначе применяем правило 7).</p></details><br />',

    '<p>Алфавит - <strong>{0,1,2}</strong>. Удалить из числа(троичная система) незначащие нули.</p><br />' +
    '<details><summary>Решение</summary>' +
    '<p>1. Ставим \'*\' слева от слова (правило 5).</p>' +
    '<p>2. Удаляем все левые нули, кроме последнего (правило 1).</p>' +
    '<p>3. Если далее - 1 или 2, то удаляем последний левый 0 и останавливаемся (правила 2 и 3).</p>' +
    '<p>4. Если же в числе только нули, то оставляем самый правый 0 (правила 1 и 4).</p>',

    '<p>Алфавит - <strong>{0,1,2,|}</strong>. Перевести число из троичной системы счисления в единичную.</p><br />' +
    '<details><summary>Решение</summary>' +
    '<p>1. Заменяем единицы или двойки нулем, добавляя \'|\' для единицы и \'||\' для двойки (правила 2 и 3).</p>' +
    '<p>2. Прогоняем \'|\' через двоичное слово слева направо, каждый раз утраивая количество \'|\' (правило 1).</p>' +
    '<p>3. В заключение удаляем все нули (правило 4).</p></details><br />',

    '<p>Алфавит - <strong>{a,b}</strong>. Если исходное слово - \'abba\', то выдать букву \'a\', иначе выдать пустое слово.</p><br />' +
    '<details><summary>Решение</summary>' +
    '<p>1. Ставим \'*#\' слева от слова и гоним \'#\' в конец (правила 8, 1 и 2).</p>' +
    '<p>2. Если слово - \'abba\', то выдаем букву \'a\' (правило 3), иначе все удаляем (правила 4 - 7).</p></details><br />',

    '<p>Алфавит - <strong>{0,1,2}</strong>. Умножить троичное число на 2.</p><br />' +
    '<details><summary>Решение</summary>' +
    '<p>Программа складывает троичное число с самим собой, что равносильно умножению на 2.</p>' +
    '<p>1. Ставим слева от числа \'*\' и гоним ее вправо до конца слова (правила 13, 9, 10, 11 и 12).</p>' +
    '<p>2. Гоним символы \'#\' и \'^\' справа налево, выполняя сложение (правила 1 - 8). Символ \'#\' ' +
    'означает, что при сложении в предыдущем разряде не было переноса в старший разряд, а ' +
    'cимвол \'^\' означает, что такой перенос был.</p></details><br />',

    '<p>Алфавит - <strong>{0,1,2}</strong>. Поделить троичное число нацело на 2.</p><br />' +
    '<details><summary>Решение</summary>' +
    '<p>1. Ставим \'^*\' слева от слова, причем \'^\' нужен для удаления возможного незначащего нуля (правило 12).</p>' +
    '<p>2. Гоним \'*\' и \'#\' cлева направо, выполняя деление обычным способом, т.е. перенося \'вниз\' ' +
    'цифру за цифрой (правила 1 - 8). Символ \'#\' означает, что остаток при предыдущем ' +
    'делении был равен 1, а символ \'*\' означает, что остаток был равен нулю.</p>' +
    '<p>3. По окончании деления удаляем незначащий ноль (если он появился) и останавливаемся ' +
    '(правила 9, 10 и 11).</p></details><br />',

    '<p>Алфавит - <strong>{a,b}</strong>. Перевернуть слово.</p><br />' +
    '<details><summary>Решение</summary>' +
    '<p>1. Ставим \'*\' слева от слова (правило 10). Далее - последовательность однотипных шагов.</p>' +
    '<p>2. Передвигаем \'*\' вправо на одну букву, одновременно меняя \'a\' на \'c\', а \'b\' на \'d\' (правила 7 и 8).</p>' +
    '<p>3. Гоним букву \'c\' или \'d\' влево, после чего меняем обратно на \'a\' или \'b\', соответственно (правила 1 - 6).</p>' +
    '<p>4. По исчерпании слова останавливаемся (правило 9).</p>,</details><br />',

    '<p>Алфавит - <strong>{0,1,2,+}</strong>. Сложить два троичных числа.</p><br />' +
    '<details><summary>Решение</summary>' +
    '<p>1. Алгоритм состоит из последовательности однотипных шагов. На каждом шаге из правого числа вычитаем ' +
    'единицу (правила 1 - 7), а к левому числу прибавляем единицу (правила 11 - 14). </p>' +
    '<p>2. Если в правом числе остались одни нули, то выполняем завершающие действия - это удаление двоек, появляющихся при попытке ' +
    'вычесть из нуля единицу, удаление символа \'#\', означающего прибавление единицы к левому числу, и удаление знака \'+\' (правила 8,9 и 10). </p></details><br />',

    '<p>Алфавит - <strong>{|,*}</strong>. Перемножить 2 числа, записанных в единичной системе счисления.</p><br />' +
    '<details><summary>Решение</summary>' +
    '<p>1. Забираем \'|\' от левого числа, одновременно добавляя символ \'^\' справа от \'*\' (правило 4).</p>' +
    '<p>2. Добавляем к правому числу столько символов \'#\', сколько в нем \'|\' (правила 1, 2 и 3).</p>' +
    '<p>3. Когда в левом числе остается только один символ \'|\', удаляем его (правило 5). Затем \n' +
    'заменяем в правом числе все символы \'#\' на \'|\' (правило 6).</p></details><br />',

    '<p>Алфавит - <strong>{(,a,)}</strong>. Если слово сбалансировано относительно скобок, то выдать пару скобок (), а в противном случае выдать пустое слово.</p><br />' +
    '<details><summary>Решение</summary>' +
    '<p>1. Удаляем все буквы \'a\' и все пары скобок \'()\' (правила 1 и 2). Если баланс скобок \n' +
    'соблюден, то останется пустое слово, а иначе останется какое-то количество скобок.</p>' +
    '<p>2. Заменяем все открывающие скобки на закрывающие (правило 3), так как после применения правил 1 и 2 тип скобок не имеет значения.</p>' +
    '<p>3. Заменяем пустое слово парой скобок \'()\' (правило 6), а непустое слово удаляем (правила 4 и 5).</p></details><br />',

    '<p>Алфавит - <strong>{0,1,2,-}</strong>. Вычесть из первого троичного числа второе (считается, что второе число не больше первого).</p><br />' +
    '<details><summary>Решение</summary>' +
    '<p>1. Вычитаем единицы из правого числа (правила 1 - 7) и из левого числа (правила 11 - 13).</p>' +
    '<p>2. Если в правом числе остались одни нули, то удаляем двойки, появляющиеся при попытке вычесть единицу из нуля, ' +
    'символ \'#\', означающий вычитание единицы из левого числа и знак \'-\' (правила 8,9 и 10).</p>' +
    '<p>3. Затем из результата удаляем незначащие нули (правила 15 - 19).</p></details><br />',

    '<p>Алфавит - <strong>{|,:}</strong>. Даны 2 числа в единичной системе счисления. Найти остаток от деления первого числа на второе.</p><br />' +
    '<details><summary>Решение</summary>' +
    '<p>1. Забираем из левого числа столько символов \'|\', сколько их в правом числе. Для этого ставим символ \'*\' справа от знака \':\' (правило 7)' +
    ' и прогоняем \'*\' через правое число, генерируя при каждом прогоне символ \'#\' (правила 1 и 2).</p>' +
    '<p>2. Далее символы \'#\' сдвигаем влево до \':\' (правило 3), после чего удаляем пары символов: \'#\' ' +
    'справа от \':\' и \'|\' слева от \':\' (правило 4).</p>' +
    '<p>3. Если слева от знака \':\' уже нет символов, то искомое число равно разности количеств символов \'#\' и \'|\'.' +
    ' Соответственно удаляем символ \':\' (правило 5) и пары \'|#\' (правило 6).</p></details><br />',

    '<p>Алфавит - <strong>{a,b,c}</strong>. Cоставить нормальный алгоритм Маркова, применимый только к пустому слову.</p><br />' +
    '<details><summary>Решение</summary>' +
    '<p>1. Зацикливаем алгоритм на словах, содержащих хотя бы одну букву \'a\' (правило 1), хотя \n' +
    'бы одну букву \'b\' (правило 2) и хотя бы одну букву \'c\' (правило 3).</p></details><br />',

    '<p>Алфавит - <strong>{a,b,c}</strong>. Составить нормальный алгоритм Маркова, применимый к любому непустому слову и неприменимый к пустому слову.</p><br />' +
    '<details><summary>Решение</summary>' +
    '<p>1. Останавливаемся на любом слове, содержащем букву \'a\' (правило 1), букву \'b\' (правило 2) и букву \'c\' (правило 3).</p>' +
    '<p>2. Зацикливаем алгоритм на пустом слове (правило 4).</p></details><br />',

    '<p>Алфавит - <strong>{a,b}</strong>. Cоставить нормальный алгоритм Маркова, применимый к любому слову ' +
    'четной длины и неприменимый с любому слову нечетной длины.</p><br />' +
    '<details><summary>Решение</summary>' +
    '<p>1. Заменяем все буквы \'b\' буквами \'a\', так как для задачи имеет значение лишь общая длина слова (правило 1).</p>' +
    '<p>2. Удаляем все пары \'aa\' (правило 2). В зависимости от четности длины исходного слова останется либо пустое слово, либо слово \'a\'.</p>' +
    '<p>3. Зацикливаем алгоритм на слове \'a\' (правило 3).</p></details><br />',

    '<p>Алфавит - <strong>{a,b}</strong>. Cоставить нормальный алгоритм Маркова, применимый к любому слову ' +
    'нечетной длины и неприменимый с любому слову четной длины.</p><br />' +
    '<details><summary>Решение</summary>' +
    '<p>1. Заменяем все буквы \'b\' буквами \'a\', так как для задачи имеет значение лишь общая длина слова (правило 1).</p>' +
    '<p>2. Удаляем все пары \'aa\'. После этого останется либо пустое слово, либо слово \'a\' (правило 2).</p>' +
    '<p>3. Останавливаемся на слове \'a\' (правило 3), зацикливаемся на пустом слове (правило 4).</p></details><br />',

    '<p>Aлфавит - <strong>{a,b}</strong>. Составить нормальный алгоритм Маркова, применимый к любому ' +
    'непустому слову четной длины и неприменимый к любому другому слову.</p><br />' +
    '<details><summary>Решение</summary>' +
    '<p>1. Заменяем все буквы \'b\' буквами \'a\', так как для задачи имеет значение лишь общая длина слова (правило 1).</p>' +
    '<p>2. Удаляем каждую пару символов \'aa\', если в слове есть еще хотя бы один символ \'a\' ' +
    '(правило 2). После этого останется либо пустое слово, либо слово \'a\', либо слово \'aa\'.</p>' +
    '<p>3. Останавливаемся на слове \'aa\' (правило 3), зацикливаемся на слове \'a\' и на пустом слове (правило 4).</p></details><br />',

    '<p>Aлфавит - <strong>{a,b}</strong>. Составить нормальный алгоритм Маркова, применимый к любому слову, содержащему хотя бы одну букву \'a\' ' +
    'и четное количество букв \'b\', и неприменимый к любому другому слову.</p><br />' +
    '<details><summary>Решение</summary>' +
    '<p>1. Переставляем все буквы \'a\' в начало слова, так как порядок следования букв не имеет значения (правило 1).</p>' +
    '<p>2. Удаляем каждую пару символов \'bb\' (правило 2).</p>' +
    '<p>3. Зацикливаем алгоритм на букве \'b\' (правило 3); буква \'b\' останется в слове, если первоначальное количество букв \'b\' было нечетным.</p>' +
    '<p>4. Останавливаемся на слове, содержащем букву \'a\' (правило 4), зацикливаемся на пустом слове (правило 5).</p></details><br />',

    '<p>Aлфавит - <strong>{a,b}</strong>. Составить нормальный алгоритм Маркова, применимый к любому слову, содержащему хотя бы одну букву \'a\' ' +
    'или четное количество букв \'b\', и неприменимый к любому другому слову.</p><br />' +
    '<details><summary>Решение</summary>' +
    '<p>1. Останавливаемся на любом слове, содержащем букву \'a\' (правило 1).</p>' +
    '<p>2. Удаляем все пары \'bb\' (правило 2). После этого останется либо пустое слово, либо слово \'b\'.</p>' +
    '<p>3. Зацикливаем алгоритм на слове \'b\' (правило 3).</p></details><br />',

    '<p>Aлфавит - <strong>{a,b}</strong>. Составить нормальный алгоритм Маркова, применимый к любому слову, ' +
    'содержащему четное количество букв \'a\' и нечетное количество букв \'b\', и неприменимый к любому другому слову.</p><br />' +
    '<details><summary>Решение</summary>' +
    '<p>1. Переносим все буквы \'a\' в начало слова, так как порядок следования букв в слове не имеет значения (правило 1).</p>' +
    '<p>2. Удаляем все пары \'aa\' и \'bb\' (правила 2 и 3). После этого, в зависимости от четности вхождений букв \'a\' и \'b\' в исходное слово, ' +
    'могут остаться слова: 1) \'ab\'; 2) \'a\'; 3) \'b\'; 4) пустое слово.</p>' +
    '<p>3. Зацикливаем алгоритм на слове \'а\' и на пустом слове (правила 4 и 6), останавливаемся на слове \'b\' (правило 5)</p></details><br />',

    '<p>Aлфавит - <strong>{a,b}</strong>. Составить нормальный алгоритм Маркова, применимый к любому слову, содержащему четное количество ' +
    'букв \'a\' или нечетное количество букв \'b\', и неприменимый к любому другому слову.</p><br />' +
    '<details><summary>Решение</summary>' +
    '<p>1. Переносим все буквы \'a\' в начало слова, так как порядок следования букв в слове не имеет значения (правило 1).</p>' +
    '<p>2. Удаляем все пары \'aa\' и \'bb\' (правила 2 и 3). После этого, в зависимости от четности ' +
    'букв \'a\' и \'b\' в исходном слове, могут остаться слова: 1) \'ab\'; 2) \'a\'; 3) \'b\'; 4) пустое слово.</p>' +
    '<p>3. Останавливаемся на словe \'b\' или \'ab\' (правилo 4), зацикливаемся на слове \'a\' (правило 5), останавливаемся на пустом слове.</p></details><br />',

    '<p>Aлфавит - <strong>{a,b}</strong>. Составить нормальный алгоритм Маркова, применимый к словам длины 3,9,15,21 и т.д., и неприменимый к другим словам.</p><br />' +
    '<details><summary>Решение</summary>' +
    '<p>1. Заменяем все буквы \'b\' буквами \'a\', так как значение имеет только длина слова (правило 1).</p>' +
    '<p>2. Удаляем все шестерки \'aaaaaa\' (правило 2). После этого могут остаться слова из букв \'a\' длины не более 5. </p>' +
    '<p>3. Зацикливаем алгоритм на словах длины 4 и 5 (правило 3), останавливаемся на словe ' +
    '\'aaa\' (правило 4) и зацикливаемся на словах длины меньше 3 (правило 5).</p></details><br />',

    '<p>Aлфавит - <strong>{a,b}</strong>. Составить нормальный алгоритм Маркова, применимый к любому слову, кроме слова \'aba\'.</p><br />' +
    '<details><summary>Решение</summary>' +
    '<p>1. Останавливаемся  на любом слове, содержащем внутри себя слово \'aba\' (правила 1-4).</p>' +
    '<p>2. Зацикливаемся на слове \'aba\' (правило 5).</p>' +
    '<p>3. Останавливаемся на любом слове, не удовлетворяющего условиям пунктов 1 и 2.</p></details><br />',

    '<p>Aлфавит - <strong>{a,b}</strong>. Составить нормальный алгоритм Маркова, применимый только к слову \'aba\'.</p><br />' +
    '<details><summary>Решение</summary>' +
    '<p>1. Зацикливаем алгоритм на любом слове, содержащем внутри себя слово \'aba\' (правила 1-4).</p>' +
    '<p>2. Останавливаемся на слове \'aba\' (правило 5).</p>' +
    '<p>3. Зацикливаем алгоритм на любом слове, не содержащем \'aba\' (правило 6).</p></details><br />',

    '<p>Aлфавит - <strong>{a,b}</strong>. Составить нормальный алгоритм Маркова, применимый к непустым словам, длина которых кратна 3 и ' +
    'содержащим либо только буквы \'a\', либо только буквы \'b\', и неприменимый к другим словам.</p><br />' +
    '<details><summary>Решение</summary>' +
    '<p>1. Зацикливаем алгоритм на любом слове, содержащем как букву \'a\', так и букву \'b\' (правила 1 и 2).</p>' +
    '<p>2. Удаляем тройки символов \'aaa\' и \'bbb\', если в слове есть другие символы (правила 3 и 4).</p>' +
    '<p>3. Останавливаемся на словах длины 3 (правила 5 и 6).</p>' +
    '<p>4. Зацикливаемся на словах длины меньше 3 (правило 7).</p></details><br />'
];

let answers = [
    'abc b->\nc->\naa->a',

    'abc *a->aa*\n*b->bb*\n*c->cc*\n*=>\n->*',

    '3210 *0->00*\n*1->01*\n*2->10*\n*3->11*\n*->\n#0=>\n#=>\n->#*',

    'abc *a=>\n*b=>\n*c=>\n*=>\n->*',

    '201 0#=>1\n1#=>2\n2#->#0\n#=>1\n*0->0*\n*1->1*\n*2->2*\n*->#\n->*',

    '|||| 2#->#0\n1#->2\n0#->1\n#->1\n*|->#*\n*=>\n->0*',

    'ccbabacab ba->ab\ncb->bc\nca->ac',

    'aabbab ab->\nba->',

    'babaabab #a->a#\n#b->b#\na#->\nb#->\n*b->b*#\n*a->a*#\n*=>\n->*',

    'abab ac->ca\nad->da\nbc->cb\nbd->db\n=c->a=\n=d->b=\n*a->ca*\n*b->db*\n*=>\n->=*',

    '101 00#->#0\n01#->#1\n10#->#2\n11#->#3\n0#=>0\n1#=>1\n#=>\n*1->1*\n*0->0*\n*->#\n->*',

    '00021012 *00->*0\n*01=>1\n*02=>2\n*=>\n->*',

    '21 |0->0|||\n1->0|\n2->0||\n0->',

    'abba #a->a#\n#b->b#\n*abba#=>a\n#->\n*a->*\n*b->*\n*=>\n->*#',

    '210 0#->#0\n1#->#2\n2#->^1\n#=>\n0^->#1\n1^->^0\n2^->^2\n^=>1\n*0->0*\n*1->1*\n*2->2*\n*->#\n->*',

    '112 #0->1#\n#1->2*\n#2->2#\n#->\n*0->0*\n*1->0#\n*2->1*\n*->\n^01=>1\n^02=>2\n^=>\n->^*',

    'bababa ac->ca\nad->da\nbc->cb\nbd->db\nc->a\nd->b\n*a->c*\n*b->d*\n*=>\n->*',

    '210+112 *0->0*\n*1->1*\n*2->2*\n*->!\n2!->1\n1!->0\n0!->!2\n!->^\n^2->^\n#+^=>\n0#->1\n1#->2\n2#->#0\n#->1\n+->#+*',

    '||*||| ^|->|^#\n^#->#^\n^->\n||*->|*^\n|*->\n#->|',

    '((a)(a)) a->\n()->\n(->)\n))->)\n)=>\n=>()',

    '210-112 *0->0*\n*1->1*\n*2->2*\n*->!\n2!->1\n1!->0\n0!->!2\n!->^\n^2->^\n#-^->\n0#->#2\n1#->0\n2#->1\n-->#-*\n&00->&0\n&01=>1\n&02=>2\n&=>\n->&',

    '|||||:||| *|->#|*\n*->\n|#->#|\n|:#->:\n:#->#\n#|->\n:->:*',

    'abc a->a\nb->b\nc->c',

    'abc a=>\nb=>\nc=>\n->',

    'abab b->a\naa->\na->a',

    'aba b->a\naa->\na=>\n->',

    'abab b->a\naaa->a\naa=>\n->',

    'bbabb ba->ab\nbb->\nb->b\na=>\n->',

    'bbbb a=>\nbb->\nb->b',

    'babab ba->ab\naa->\nbb->\na->a\nb=>\n-> ',

    'abab ba->ab\naa->\nbb->\nb=>\na->a',

    'babababab b->a\naaaaaa->\naaaa->aaaa\naaa=>\n->',

    'abababa abaa=>abaa\nabab=>abab\naaba=>aaba\nbaba=>baba\naba->aba',

    'aba abaa->abaa\nabab->abab\naaba->aaba\nbaba->baba\naba=>\n->',

    'aaaaaa ba->ba\nab->ab\naaaa->a\nbbbb->b\naaa=>\nbbb=>\n->'
];


